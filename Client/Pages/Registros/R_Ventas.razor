@page "/VentaVehiculos"
@page "/VentaVehiculos/{VentaId:int}"
@using DealerAutos.Client.Extensors
@inject HttpClient httpClient
@inject NotificationService notificationService

<EditForm Model="ventas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de ventas.</h3>
            </div>
            <div class=card-body>
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Venta Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="ventas.VentaId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" 
                        type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass"></i></button>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="ventas.Fecha" class="form-control" />
                    <ValidationMessage For="() => ventas.Fecha" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Nombre">Nombre:</label>
                    <InputText @bind-Value="ventas.Nombre" class="form-control" />
                    <ValidationMessage For="() => ventas.Nombre" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Apellido">Apellido:</label>
                    <InputText @bind-Value="ventas.Apellido" class="form-control" />
                    <ValidationMessage For="() => ventas.Apellido" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Cedula">Cédula:</label>
                    <InputText @bind-Value="ventas.Cedula" class="form-control" />
                    <ValidationMessage For="() => ventas.Cedula" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Telefono">Teléfono:</label>
                    <InputText @bind-Value="ventas.Telefono" class="form-control" />
                    <ValidationMessage For="() => ventas.Telefono" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Direccion">Dirección:</label>
                    <InputText @bind-Value="ventas.Direccion" class="form-control" />
                    <ValidationMessage For="() => ventas.Direccion" />
                </div>
                
                <hr>
                <fieldset>
                    <legend>Lista de vehiculos:</legend>
                    <div class="row">
                        <div class="col-4">
                            <label for="SelectP">Vehiculos:</label>
                            <div class = "input-group">
                                <RadzenDropDown class="form-control" Data="@L_Vehiculos.Where(p => p.VehiculoId != 5)" TextProperty="Modelo" ValueProperty="VehiculoId" @bind-Value="@vehiculosDetalles.VehiculoId"></RadzenDropDown>
                                <button type="button" class="btn btn-dark" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button> 
                            </div>
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Imagen</th>
                                <th>VehiculoId</th>
                                <th>Modelo</th>
                                <th>Marca</th>
                                <th>Tipo</th>
                                <th>Precio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in ventas.VehiculosDetalles)
                            {
                                <tr>
                                    <td><img src="@L_Vehiculos.FirstOrDefault(p => p.VehiculoId == item.VehiculoId)?.Imagen" width="60px" height="60px" /></td>
                                    <td>@item.VehiculoId</td>
                                    <td>@L_Vehiculos.FirstOrDefault(p => p.VehiculoId == item.VehiculoId)?.Modelo</td>
                                    <td>@L_Vehiculos.FirstOrDefault(p => p.VehiculoId == item.VehiculoId)?.Marca</td>
                                    <td>@L_Vehiculos.FirstOrDefault(p => p.VehiculoId == item.VehiculoId)?.Tipo</td>
                                    <td>@item.Precio</td>
                                    <td>
                                        <button class="btn btn-danger mr-2" onclick="@(() => EliminarDetalle(item))"><i class="oi oi-trash"></i></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row d-flex justify-content-center">
                        <div class="col-5">
                            <label class="form-label" for="Total">Total de la venta:</label>
                            <InputNumber @bind-Value="ventas.Total" class="form-control" disabled />
                        </div>
                    </div>
                </fieldset>

            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file"></i></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"></i></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash"></i></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
<label>@Mensaje</label>

@code {
    [Parameter]
    public int VentaId { get; set; }
    public int VehiculoId { get; set; }
    public Ventas ventas { get; set; } = new Ventas();
    public VehiculosDetalles vehiculosDetalles { get; set; } = new VehiculosDetalles();
    public string Mensaje { get; set; } = string.Empty;
    public List<Vehiculos> L_Vehiculos { get; set; } = new List<Vehiculos>();
    
    protected override async Task OnInitializedAsync()
    {
        var vehiculos = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");

        if (vehiculos is not null)
        {
            L_Vehiculos = vehiculos;
        }
    }

    public void SetTotal()
    {
        ventas.Total = ventas.VehiculosDetalles.Sum(v => v.Precio);
    }

    public void Nuevo()
    {
        ventas = new Ventas();
        Mensaje = string.Empty;
        notificationService.ShowNotification(
            titulo: "Nueva venta",
            mensaje: "Se ha creado una nueva venta.",
            NotificationSeverity.Info
        );
    }
    
    public async Task Buscar()
    {
        try
        {
            var ventaEncontrada = await httpClient.GetFromJsonAsync<Ventas>($"api/Ventas/{ventas.VentaId}");
            if (ventaEncontrada != null)
            {
                ventas = ventaEncontrada;
                StateHasChanged();
                notificationService.ShowNotification(
                    titulo: "Búsqueda exitosa",
                    mensaje: "Se encontró la venta.",
                    NotificationSeverity.Success
                );
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async Task Guardar()
    {
        try
        {
            using var response = await httpClient.PostAsJsonAsync("api/Ventas", ventas);
            response.EnsureSuccessStatusCode();
            var exito = await response.Content.ReadFromJsonAsync<Ventas>();
            if (exito != null)
            {
                ventas = exito;
                StateHasChanged();
                Nuevo();
                notificationService.ShowNotification(
                    titulo: "Éxito",
                    mensaje: "Registro guardado",
                    NotificationSeverity.Success
                );
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "El registro no se guardó correctamente",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async Task Eliminar()
    {
        try
        {
            using var response = await httpClient.DeleteAsync($"api/Ventas/{ventas.VentaId}");
            response.EnsureSuccessStatusCode();
            Nuevo();
            notificationService.ShowNotification(
                titulo: "Eliminado",
                mensaje: "La venta se ha eliminado correctamente",
                NotificationSeverity.Success
            );
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public bool Validar()
    {
        return 
               !string.IsNullOrEmpty(ventas.Nombre) &&
               !string.IsNullOrEmpty(ventas.Apellido) &&
               !string.IsNullOrEmpty(ventas.Telefono) &&
               !string.IsNullOrEmpty(ventas.Cedula) &&
               !string.IsNullOrEmpty(ventas.Direccion);
    }

    public bool ValidarDetalle()
    {
        if (vehiculosDetalles.VehiculoId < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private async Task<Vehiculos> BuscarVentas(int VehiculoId)
    {
        var vehiculos = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{VehiculoId}");

        if(vehiculos == null)
        {
            return new Vehiculos();
        }

        return vehiculos;
    }
    
    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            var vehiculos = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{vehiculosDetalles.VehiculoId}");

            if (vehiculos != null)
            {
                vehiculosDetalles.Precio = vehiculos.Precio;
                ventas.VehiculosDetalles.Add(vehiculosDetalles);
                SetTotal();
                vehiculosDetalles = new VehiculosDetalles();
            }
        }
    }

    public void EliminarDetalle(VehiculosDetalles vehiculosDetalles)
    {
        this.ventas.VehiculosDetalles.Remove(vehiculosDetalles);
        SetTotal();
    }
}