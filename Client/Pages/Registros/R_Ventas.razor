@page "/RegistroVentas"
@page "/RegistroVentas/{VentaId:int}"
@using DealerAutos.Client.Extensors;
@inject NotificationService notificationService
@inject HttpClient httpClient

<EditForm Model="ventas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de ventas.</h3>
            </div>
            <div class=card-body>
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Entrada Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="ventas.VentaId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" 
                        type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass"></i></button>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Nombre">Nombre:</label>
                    <InputText @bind-Value="ventas.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Nombre)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Apellido">Apellido:</label>
                    <InputText @bind-Value="ventas.Apellido" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Apellido)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="ventas.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Fecha)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Telefono">Telefono:</label>
                    <InputText @bind-Value="ventas.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Telefono)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Cedula">Cedula:</label>
                    <InputText @bind-Value="ventas.Cedula" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Cedula)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Direccion">Direccion:</label>
                    <InputText @bind-Value="ventas.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Direccion)" />
                </div>
                
                <div class="mb-3">
                    <label class="form-label" for="DireccionVenta">DireccionVenta:</label>
                    <InputText @bind-Value="ventas.DireccionVenta" class="form-control" />
                    <ValidationMessage For="@(() => ventas.DireccionVenta)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Ciudad">Ciudad:</label>
                    <InputText @bind-Value="ventas.Ciudad" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Ciudad)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Precio">Precio:</label>
                    <InputNumber @bind-Value="ventas.Precio" class="form-control" />
                    <ValidationMessage For="@(() => ventas.Precio)" />
                </div>

            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>


</EditForm>
<label>@Mensaje</label>

@code {

    [Parameter]

    public int VentaId { get; set; }

    public Ventas ventas { get; set; } = new Ventas();

    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (VentaId > 0)
        {
            ventas.VentaId = VentaId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        try
        {
            var ventaEncontrada = await httpClient.GetFromJsonAsync<Ventas>($"api/Ventas/{ventas.VentaId}");
            if (ventaEncontrada != null)
            {
                ventas = ventaEncontrada;
                StateHasChanged();

                notificationService.ShowNotification(
                    titulo: "Búsqueda exitosa",
                    mensaje: "Se encontró la venta.",
                    NotificationSeverity.Success
                );
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error de búsqueda",
                    mensaje: "Registro no encontrado",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error de búsqueda",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public async Task Guardar()
    {
        try
        {
            using var response = await httpClient.PostAsJsonAsync("api/Ventas", ventas);
            response.EnsureSuccessStatusCode();

            var exito = await response.Content.ReadFromJsonAsync<Ventas>();
            if (exito != null)
            {
                ventas = exito;
                StateHasChanged();
                Nuevo();
                notificationService.ShowNotification(
                    titulo: "Éxito",
                    mensaje: "Registro guardado",
                    NotificationSeverity.Success
                );
            }
            else
            {
                notificationService.ShowNotification(
                    titulo: "Error",
                    mensaje: "El registro no se guardó correctamente",
                    NotificationSeverity.Error
                );
            }
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public void Nuevo()
    {
        ventas = new Ventas();
        Mensaje = string.Empty;

        notificationService.ShowNotification(
            titulo: "Nueva venta",
            mensaje: "Se ha creado una nueva venta.",
            NotificationSeverity.Info
        );
    }

    public async Task Eliminar()
    {
        try
        {
            using var response = await httpClient.DeleteAsync($"api/Ventas/{ventas.VentaId}");
            response.EnsureSuccessStatusCode();

            Nuevo();
            notificationService.ShowNotification(
                titulo: "Eliminado",
                mensaje: "La venta se ha eliminado correctamente",
                NotificationSeverity.Success
            );
        }
        catch (Exception ex)
        {
            notificationService.ShowNotification(
                titulo: "Error",
                mensaje: ex.Message,
                NotificationSeverity.Error
            );
        }
    }

    public bool Validar()
    {
        return !string.IsNullOrEmpty(ventas.Nombre) &&
               !string.IsNullOrEmpty(ventas.Apellido) &&
               !string.IsNullOrEmpty(ventas.Telefono) &&
               !string.IsNullOrEmpty(ventas.Cedula) &&
               !string.IsNullOrEmpty(ventas.Direccion) &&
               !string.IsNullOrEmpty(ventas.DireccionVenta) &&
               !string.IsNullOrEmpty(ventas.Ciudad);
    }
}