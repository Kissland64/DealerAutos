@page "/RegistroVehiculos"
@page "/RegitroVehiculos/{VehiculoId:int}"
@using DealerAutos.Client.Extensors;
@inject HttpClient httpClient
@inject NotificationService notify

<EditForm model="vehiculos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de vehiculos.</h3>
            </div>
            <div class=card-body>
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Vehiculo Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="vehiculos.VehiculoId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" 
                        type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass"></i></button>
                    </div>
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Nombre">Nombre:</label>
                    <InputText @bind-Value="vehiculos.Nombre" class="form-control" />
                    <ValidationMessage For="() => vehiculos.Nombre" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha:</label>
                    <InputDate @bind-Value="vehiculos.Fecha" class="form-control" />
                    <ValidationMessage For="() => vehiculos.Fecha" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Anio">Anio:</label>
                    <InputDate @bind-Value="vehiculos.Anio" class="form-control" />
                    <ValidationMessage For="() => vehiculos.Anio" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Placa">Placa:</label>
                    <InputText @bind-Value="vehiculos.Placa" class="form-control" />
                    <ValidationMessage For="() => vehiculos.Placa" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="Precio">Precio:</label>
                    <InputNumber @bind-Value="vehiculos.Precio" class="form-control" />
                    <ValidationMessage For="() => vehiculos.Precio" />
                </div>

                <hr>
                <fieldset>
                    <legend>vehiculos detalles</legend>
                    <div class="row">
                        <div class="col-md-6">
                            <InputSelect @bind-Value="vehiculosDetalles.VehiculoId" class="form-select">
                                <option value="@vehiculos.VehiculoId" hidden="hidden">Seleccione un Vehiculo</option>
                                @foreach (var item in L_Vehiculos)
                                {
                                    <option value="@item.VehiculoId">@item.Descripcion</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => vehiculosDetalles.VehiculoId)" />
                        </div>

                        <div class="col-md-5">
                            <label>Cantidad</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="vehiculosDetalles.CantidadAquirida" class="form-control"></InputNumber>
                                <button type="button" class="btn btn-dark" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                                <ValidationMessage For="@(() => vehiculosDetalles.CantidadAquirida)" />
                            </div>
                        </div>
                    </div>

                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Vehiculo ID</th>
                                <th>Descripcion</th>
                                <th>Precio</th>
                                <th>CantidadAquirida</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in this.vehiculos.VehiculosDetalles)
                            {
                                var articulo = ObtenerVehiculos(item.VehiculoId);
                                <tr>
                                    <td><img src="@articulo.Imagen" width="60px" height="60px" /></td>
                                    <td>@item.VehiculoId</td>
                                    <td>@ObtenerDescripcion(item.VehiculoId)</td>
                                    <td>@item.CantidadAquirida</td>
                                    <td>@item.Precio</td>
                                    <td><button type="button" class="btn btn-danger" @onclick=@(() => EliminarDetalle(item))><i class="oi oi-trash" /></button></td>
                                </tr>
                            }
                        </tbody>
                    </table>

                    <div class="row d-flex justify-content-center">
                        <div class="col-md-6">
                            <label>Total</label>
                            <input disabled @bind-value="Total" class="form-control"/>
                        </div>
                    </div>
                </fieldset>
            </div>

            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Limpiar">Nuevo <i class="oi oi-file"/></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document"/></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash"/></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int VehiculoId { get; set; }
    public Vehiculos vehiculos { get; set; } = new Vehiculos();
    public VehiculosDetalles vehiculosDetalles { get; set; } = new VehiculosDetalles();
    public int Total { get; set; }
    public int Cantidad { get; set; }
    public double? PrecioTotal { get; set; }
    public List<Vehiculos> L_Vehiculos { get; set; } = new List<Vehiculos>();

    protected override async Task OnInitializedAsync()
    {
        var vehiculos = await httpClient.GetFromJsonAsync<List<Vehiculos>>("api/Vehiculos");

        if(vehiculos is not null)
        {
            L_Vehiculos = vehiculos;
        }

        if(VehiculoId > 0)
        {
            this.vehiculos.VehiculoId = VehiculoId;
            await this.Buscar();
        }
    }

    public void Nuevo()
    {
        this.vehiculos = new Vehiculos();
        PrecioTotal = 0;
    }

    public void Limpiar()
    {
        this.vehiculos = new Vehiculos();
        PrecioTotal = 0;
        notify.ShowNotification(titulo: "Nuevo", mensaje: "Se ha limpiado correctamente", NotificationSeverity.Info);
    }

    public async Task<bool> Buscar()
    {
        try
        {
            var VehiculoEncontrado = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{vehiculos.VehiculoId}");
            
            if(VehiculoEncontrado != null)
            {
                int Suma = 0;
                double? Suma1 = 0;
                this.vehiculos = VehiculoEncontrado;
                this.vehiculos.VehiculosDetalles = VehiculoEncontrado.VehiculosDetalles.ToList();

            foreach(var item in vehiculos.VehiculosDetalles)
            {
                Suma += item.CantidadAquirida;
                Suma1 += item.Precio;
                Total = Suma;
                PrecioTotal = Suma1;
            }

            StateHasChanged();
            notify.ShowNotification(titulo: "Encontrado", mensaje: "La compra se ha encontrado con exito", NotificationSeverity.Success);
            return true;
            }
            else
            {
                return false;
            }
            }
            catch
            {
            notify.ShowNotification(titulo: "No encontrado", mensaje: "Esa compra no existe, intentelo de nuevo", NotificationSeverity.Warning);
            return false;
        }
    }

    private async Task<Vehiculos> BuscarVehiculos(int VehiculoId)
    {
        var vehiculos = await httpClient.GetFromJsonAsync<Vehiculos>($"api/Vehiculos/{VehiculoId}");

        if(vehiculos == null)
        {
            return new Vehiculos();
        }

        return vehiculos;
    }

    public bool Validar()
    {
        if(vehiculos.CantidadEnposesion < 0)
        {
            return false;
        }
        if(vehiculos.Total < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    
    public bool ValidarDetalle()
    {
        if(vehiculosDetalles.VehiculoId < 0)
        {
            return false;
        }
        if(vehiculosDetalles.CantidadAquirida < 0)
        {
            return false;
        }
        if(vehiculosDetalles.Precio < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        vehiculos.VehiculosDetalles = this.vehiculos.VehiculosDetalles.ToList();
        using var response = await httpClient.PostAsJsonAsync("api/Compras", vehiculos);

        if(Validar())
        {
            if(ValidarDetalle())
            {
                if(response.IsSuccessStatusCode)
                {
                    var VehiculoDevuelto = await response.Content.ReadFromJsonAsync<Vehiculos>();
                    
                    if(VehiculoDevuelto is not null)
                    {
                        this.vehiculos = VehiculoDevuelto;
                        Nuevo();
                        notify.ShowNotification(titulo: "Guardado", mensaje: "Se ha guardado correctamente", NotificationSeverity.Success);
                    }
                    else
                    {
                        notify.ShowNotification(titulo: "Error", mensaje: "No hay nada para guardar", NotificationSeverity.Error);
                    }
                }
                else
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "Ha occurido un error, intentelo de nuevo", NotificationSeverity.Warning);
                }
            }
        }
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Vehiculos/{vehiculos.VehiculoId}");

        if(Validar())
        {
            if(ValidarDetalle())
            {
                if(!response.IsSuccessStatusCode)
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "No hay nada por eliminar", NotificationSeverity.Warning);
                    return;
                }
                else
                {
                    Nuevo();
                    notify.ShowNotification(titulo: "Eliminado", mensaje: "La compra se ha eliminado correctamente", NotificationSeverity.Error);
                }
            }
        }
    }

    public async Task AgregarDetalle()
    {
        if(ValidarDetalle())
        {
            if(vehiculosDetalles.CantidadAquirida <= 0)
            {
                notify.ShowNotification(titulo: "Error", mensaje: "La cantidad a utilizar debe ser mayor a cero", NotificationSeverity.Warning);
                return;
            }

            var vehiculos = await BuscarVehiculos(vehiculosDetalles.VehiculoId);

            if(vehiculos != null)
            {
                int Suma = 0;
                double? Suma1 = 0;

                if(vehiculosDetalles.CantidadAquirida > vehiculos.Existencia)
                {
                    notify.ShowNotification(titulo: "Error", mensaje: "La cantidad utilizada es mayor que la cantidad del producto", NotificationSeverity.Warning);
                    return;
                }

                vehiculosDetalles.VehiculoId = vehiculos.VehiculoId;
                vehiculosDetalles.Precio = vehiculos.Precio;
                vehiculos.VehiculosDetalles.Add(vehiculosDetalles);
                vehiculosDetalles = new VehiculosDetalles();
                notify.ShowNotification(titulo: "Compra Agregada", mensaje: "La compra se ha guardado correctamente", NotificationSeverity.Success);

                foreach(var item in vehiculos.VehiculosDetalles)
                {
                    Suma += item.CantidadAquirida;
                    Suma1 += item.Precio;
                    Total = Suma;
                    PrecioTotal = Suma1;
                }
            }
        }
    }

    public void EliminarDetalle(VehiculosDetalles detalle)
    {
        this.vehiculos.VehiculosDetalles.Remove(detalle);
        PrecioTotal = this.vehiculos.VehiculosDetalles.Sum(p => p.Precio);
    }

    public Vehiculos ObtenerVehiculos(int VehiculoId)
    {
        var vehiculos = L_Vehiculos.FirstOrDefault(v => v.VehiculoId == VehiculoId);
        return vehiculos;
    }

    public string ObtenerDescripcion(int VehiculoId)
    {
        return L_Vehiculos.Where(v => v.VehiculoId == VehiculoId).FirstOrDefault().Descripcion;
    }
}