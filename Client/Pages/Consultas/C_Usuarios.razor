@page "/ConsultaUsuarios"
@inject HttpClient httpClient
@inject IUsuarioAutenticadoService usuarioAutenticadoService
@using System.Linq
@using DealerAutos.Client.Sesion;

<div class="card">
    <div class="card">
        <div class="card-header">
            <h3> Consulta de Usuarios </h3>
        </div>

        <div class="card-body">
            <form>
                <div class="input-group d-flex align-items-end">
                    <InputSelect class="form-select col-2" @bind-Value="filtro">
                        <option value="0">Sin filtro</option>
                        <option value="1">Usuario Id</option>
                        <option value="2">Nombre Completo</option>
                        <option value="3">Nombre Usuario</option>
                        <option value="4">Email</option>
                        <option value="5">Rol</option>
                    </InputSelect>

                    <div class="flex-fill mx-2">
                        <div class="input-group">
                            <label class="input-group-text"> Busqueda </label>
                            <InputText class="form-control" placeholder = "Igrense el dato necesario para su busqueda" @bind-Value="Criterio" />
                        </div>
                    </div>

                    <button type="button" class="btn btn-sm-10 btn-primary" @onclick="Buscar"> <span class="oi oi-magnifying-glass"></span> Buscar </button>
                </div>
            </form>
        </div>

        @if (ListUsuarios is not null && ListUsuarios.Count > 0)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>UsuarioId</th>
                        <th>Nombre Completo</th>
                        <th>Nombre de Usuario</th>
                        <th>Email</th>
                        <th>Fecha de Nacimiento</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ListUsuarios)
                    {
                        <tr>
                            <td>@item.UsuarioId</td>
                            <td>@item.NombreCompleto</td>
                            <td>@item.NombreUsuario</td>
                            <td>@item.Email</td>
                            <td>@item.FechaNacimiento.ToString("dd/MM/yyyy")</td>
                            <td><a href="Usuarios/@item.UsuarioId">Ver</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>

    <div class="card-footer">
        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
            <div class="col-3">
                <label for="CantidaRegistro" class="col-form-label"><strong>Filas</strong>&nbsp;</label>
                <input id="CantidaRegistro" @bind-value="@conteo" disabled class="form-control" />
            </div>
        </div>
    </div>
</div>


@code {

    private List<Usuario> ListUsuarios;
    private List<Usuario> UsuarioFiltrodos;
    private int conteo;
    private string filtro = "0";
    private string Criterio;
    public List<Rol>? Roles { get; set; } = new List<Rol>();

    protected override async Task OnInitializedAsync()
    {
       await Buscar();
    }

    public string GetRolNombre(int rolId)
    {
        var rol = Roles.FirstOrDefault(r => r.RolId == rolId);
        return rol != null ? rol.NombreRol : "Rol desconocido";
    }

    public async Task BuscarRoles()
    {
        await Buscar();
        Roles = await httpClient.GetFromJsonAsync<List<Rol>>("api/Usuario/GetRoles");
    }

    private async Task Buscar()
    {
        UsuarioFiltrodos = await httpClient.GetFromJsonAsync<List<Usuario>>($"api/Usuario");
        ListUsuarios = new List<Usuario>(UsuarioFiltrodos);

        if (!string.IsNullOrEmpty(Criterio) && !string.IsNullOrEmpty(filtro))
        {
            switch (filtro)
            {
                case "1":
                    if (int.TryParse(Criterio, out int UsuarioId))
                    {
                        ListUsuarios = ListUsuarios.Where(c => c.UsuarioId == UsuarioId).ToList();
                    }
                    break;
                case "2":
                    ListUsuarios = ListUsuarios.Where(c => c.NombreCompleto.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "3":
                    ListUsuarios = ListUsuarios.Where(c => c.NombreUsuario.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "4":
                    ListUsuarios = ListUsuarios.Where(c => c.Email.Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "5":
                    ListUsuarios = ListUsuarios.Where(u => GetRolNombre(u.Rol).Contains(Criterio, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                }
            }
        conteo = ListUsuarios != null ? ListUsuarios.Count() : 0;
        }
    }